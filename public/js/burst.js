console.log('Loading Assett: ', d3);
window.bob = {
 "name": "flare",
 "children": [
  {
   "name": "analytics",
   "children": [
    {
     "name": "cluster",
     "children": [
      {"name": "AgglomerativeCluster", "size": 3938, id: '25442'},
      {"name": "CommunityStructure", "size": 3812, id: '66763'},
      {"name": "HierarchicalCluster", "size": 6714, id: 'a6635'},
      {"name": "MergeEdge", "size": 743, id: 'g4662'}
     ]
    },
    {
     "name": "graph",
     "children": [
      {"name": "BetweennessCentrality", "size": 3534, id: '2987'},
      {"name": "LinkDistance", "size": 5731, id: '7786'},
      {"name": "MaxFlowMinCut", "size": 7840, id: 't5356'},
      {"name": "ShortestPaths", "size": 5914, id: 'h5736' },
      {"name": "SpanningTree", "size": 3416, id: 'g73663'}
     ]
    },
    {
     "name": "optimization",
     "children": [
      {"name": "AspectRatioBanker", "size": 7074, id: '6755'}
     ]
    }
   ]
  }]
}

// Generated by CoffeeScript 1.11.1

  var Starburst,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.onload = function() {
    var data, chart;
    data = window.bob;
    if (data) {
      chart = new Starburst();
      console.log('Instantiated Starburst');
      return chart.data(data);
    }
  };

  Starburst = (function() {
    function Starburst(height, width) {
      this.height = height;
      this.width = width;
      this.data = bind(this.data, this);
      if (!this.height) {
        this.height = 500;
      }
      if (!this.width) {
        this.width = 410;
      }
      this.radius = Math.min(this.width, this.height) / 2;
      this.x = d3.scaleLinear().range([0, 2 * Math.PI]);
      this.y = d3.scaleSqrt().range([0, this.radius]);
      this.color = d3.schemeCategory20c;
      this.svg = d3.select("#starburst").append("svg").attr("width", this.width).attr("height", this.height).append("g").attr("transform", "translate(" + this.width / 2 + "," + (this.height / 2 + 10) + ")").on("mousemove", (function(_this) {
        return function(d) {
          return Session.set('curInfoStyle');
        };
      })(this)).on("mouseout", (function(_this) {
        return function(d) {
          return _this.tooltip.style("visibility", "hidden");
        };
      })(this));
      this.partition = d3.partition();
      console.log(this.partition);
      this.partition(10).sort(null);
      this.arc = d3.svg.arc().startAngle((function(_this) {
        return function(d) {
          return Math.max(0, Math.min(2 * Math.PI, _this.x(d.x)));
        };
      })(this)).endAngle((function(_this) {
        return function(d) {
          return Math.max(0, Math.min(2 * Math.PI, _this.x(d.x + d.dx)));
        };
      })(this)).innerRadius((function(_this) {
        return function(d) {
          return Math.max(0, _this.y(d.y));
        };
      })(this)).outerRadius((function(_this) {
        return function(d) {
          return Math.max(0, _this.y(d.y + d.dy));
        };
      })(this));
      this.node = null;
    }

    Starburst.prototype.data = function(root) {
      var arcTweenData, arcTweenZoom, click, mouseover, path, stash;
      if (!root) {
        root = window.bob;
      }
      this.node = root;
      stash = function(d) {
        d.x0 = d.x;
        return d.dx0 = d.dx;
      };
      arcTweenData = (function(_this) {
        return function(a, i) {
          var oi, tween, xd;
          oi = d3.interpolate({
            x: a.x0,
            dx: a.dx0
          }, a);
          tween = function(t) {
            var b;
            b = oi(t);
            a.x0 = b.x;
            a.dx0 = b.dx;
            return _this.arc(b);
          };
          if (i === 0) {
            xd = d3.interpolate(_this.x.domain(), [node.x, node.x + node.dx]);
            return function(t) {
              _this.x.domain(xd(t));
              return tween(t);
            };
          } else {
            return tween;
          }
        };
      })(this);
      arcTweenZoom = (function(_this) {
        return function(d) {
          var interY, xd, yd, yr;
          interY = 0;
          if (d.y) {
            interY = 20;
          } else {
            interY = 0;
          }
          yd = d3.interpolate(_this.y.domain(), [d.y, 1]);
          yr = d3.interpolate(_this.y.range(), [interY, _this.radius]);
          xd = d3.interpolate(_this.x.domain(), [d.x, d.x + d.dx], yd, yr);
          return function(d, i) {
            if (i) {
              return function(t) {
                return _this.arc(d);
              };
            } else {
              return function(t) {
                _this.x.domain(xd(t));
                _this.y.domain(yd(t)).range(yr(t));
                return _this.arc(d);
              };
            }
          };
        };
      })(this);
      click = (function(_this) {
        return function(d) {
          _this.node = d;
          return path.transition().duration(1000).attrTween("d", arcTweenZoom(d));
        };
      })(this);
      mouseover = (function(_this) {
        return function(d) {
          Session.set('curTooltip', d.name);
          if (d.children) {
            Session.set('curCat', d.name);
          }
          Session.set('curQuestId', d.questionId);
          Session.set('curRespId', d.id);
          return _this.tooltip.style("visibility", "visible");
        };
      })(this);
      path = this.svg.datum(root).selectAll("path").data(this.partition.nodes).enter().append("path").attr("d", this.arc).style("fill", (function(_this) {
        return function(d) {
          var item, value;
          item = null;
          if (d.children) {
            return _this.color(d.name);
          }
          if (d.value) {
            value = parseInt(d.value);
            switch (false) {
              case !(value < 25):
                return '#de2d26';
              case !(value >= 25 && value < 50):
                return '#fc9272';
              case value !== 50:
                return '#e5f5e0';
              case !(value > 50 && value <= 75):
                return '#a1d99b';
              case !(value > 75):
                return '#31a354';
              default:
                return _this.color(d.name);
            }
          } else {
            return _this.color(d.parent.name);
          }
        };
      })(this)).on("click", click).on("mouseover", mouseover).each(stash);
      return d3.selectAll("input").on("change", (function(_this) {
        return function() {
          var value;
          if (_this.value === 'count') {
            value = function() {
              return 1;
            };
          } else {
            value = function(d) {
              return d.size;
            };
          }
          return path.data(_this.partition.value(value).nodes).transition().duration(1000).attrTween("d", arcTweenData);
        };
      })(this));
    };

    return Starburst;

  })();


